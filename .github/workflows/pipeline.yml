on:
  push:

name: Build / Test / Deploy workflow

jobs:
  buildPipeline:
    timeout-minutes: 15
    name: Build pipeline
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and tag image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devops-demo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Test image
      id: test-image
      env:
        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
      run: |
        docker run --rm $IMAGE_NAME test 

    - name: Push image to Amazon ECR
      id: push-image
      if: ${{ github.ref == 'master' }}
      env:
        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
      run: |
        docker push $IMAGE_NAME

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      if: ${{ github.ref == 'master' }}
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: web-server
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      if: ${{ github.ref == 'master' }}
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: roman-numeral-translator-service
        cluster: devops-demo-cluster
        wait-for-service-stability: true
